<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LJHeisenberg&#39; Blog</title>
  
  <subtitle>ljheisenberg</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ljheisenberg1072.github.io/"/>
  <updated>2019-11-20T07:40:33.454Z</updated>
  <id>https://ljheisenberg1072.github.io/</id>
  
  <author>
    <name>LJHeisenberg</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手动部署 Laravel 应用</title>
    <link href="https://ljheisenberg1072.github.io/2019/11/20/deploy-laravel-project-byhands/"/>
    <id>https://ljheisenberg1072.github.io/2019/11/20/deploy-laravel-project-byhands/</id>
    <published>2019-11-20T04:30:44.000Z</published>
    <updated>2019-11-20T07:40:33.454Z</updated>
    
    <content type="html"><![CDATA[<h2 id="手动部署-Laravel-应用（基于Ubuntu18-04）"><a href="#手动部署-Laravel-应用（基于Ubuntu18-04）" class="headerlink" title="手动部署 Laravel 应用（基于Ubuntu18.04）"></a>手动部署 Laravel 应用（基于Ubuntu18.04）</h2><h3 id="0-腾讯云服务器需要注意"><a href="#0-腾讯云服务器需要注意" class="headerlink" title="0. 腾讯云服务器需要注意"></a>0. 腾讯云服务器需要注意</h3><ol><li>禁用<code>systemd-resolved</code>服务</li></ol><pre><code class="bash">$ systemctl stop systemd-resolved$ systemctl disable systemd-resolved</code></pre><ol start="2"><li>编辑<code>/etc/resolv.conf</code>文件，默认是<code>127.0.0.53</code></li></ol><pre><code class="bash">$ nameserver 127.0.0.53            # 原始$ nameserver 114.114.114.114    # 替换后</code></pre><ol start="3"><li>注意<code>/etc/apt/source.list</code>中的源地址<br>把<code>mirrors.tencentyun.com</code>替换成<code>mirrors.cloud.tencent.com</code>，否则镜像有问题</li></ol><h3 id="1-初始化系统"><a href="#1-初始化系统" class="headerlink" title="1. 初始化系统"></a>1. 初始化系统</h3><ol><li>更新软件源</li></ol><pre><code class="bash">$ apt update</code></pre><ol start="2"><li>查看可升级软件包，并升级（生产环境谨慎操作）</li></ol><pre><code class="bash">$ apt list --upgradable$ apt upgrade</code></pre><ol start="3"><li>本地化配置（国内服务器都已经配置好）</li></ol><pre><code class="bash">$ locale-gen en_US.UTF-8$ update-locale LC_ALL=en_US.UTF-8$ timedatectl set-timezone Asia/Shanghai</code></pre><h3 id="2-安装-Nginx"><a href="#2-安装-Nginx" class="headerlink" title="2. 安装 Nginx"></a>2. 安装 Nginx</h3><ol><li>安装 Nginx</li></ol><pre><code class="bash">$ apt install nginx</code></pre><ol start="2"><li>管理 Nginx 服务</li></ol><pre><code class="bash">$ service nginx start        # 启动 Nginx$ service nginx stop        # 停止 Nginx$ service nginx restart        # 重启 Nginx$ systemctl enable nginx    # 启用 Nginx 开机启动$ systemctl disable nginx     # 禁用 Nginx 开机启动</code></pre><ol start="3"><li>确认 Nginx 正常运行</li></ol><p>在浏览器内输入服务器公网 IP（或域名）并打开，出现欢迎界面说明 Nginx 安装成功</p><h3 id="3-安装-PHP-FPM"><a href="#3-安装-PHP-FPM" class="headerlink" title="3. 安装 PHP-FPM"></a>3. 安装 PHP-FPM</h3><ol><li>配置第三方软件源</li></ol><pre><code class="bash">$ apt install -y software-properties-common$ add-apt-repository -y ppa:ondrej/php$ apt-get update</code></pre><ol start="2"><li>安装 PHP</li></ol><p>PHP 的安装分为三个软件包：PHP、PHP-CLI、PHP-FPM</p><pre><code class="bash">$ apt install -y php7.2 php7.2-cli php7.2-fpm</code></pre><ol start="3"><li>安装 PHP 必要的扩展</li></ol><pre><code class="bash">$ apt install -y php7.2-mbstring php7.2-xml php7.2-bcmath php7.2-curl php7.2-gd php7.2-mysql php7.2-opcache php7.2-zip php7.2-sqlite3 php7.2-json</code></pre><ol start="4"><li>根据命令搜索当前软件源内包</li></ol><pre><code class="bash">$ apt-cache search php7.2</code></pre><ol start="5"><li>管理 PHP-FPM 服务</li></ol><pre><code class="bash">$ service php7.2-fpm restart    # 重启 PHP-FPM$ service php7.2-fpm start        # 启动 PHP-FPM$ service php7.2-fpm stop        # 停止 PHP-FPM$ systemctl enable php7.2-fpm    # 启用 PHP-FPM 开机启动$ systemctl disable php7.2-fpm    # 禁用 PHP-FPM 开机启动</code></pre><ol start="6"><li>确认 PHP-FPM 正常运行</li></ol><pre><code class="bash">$ ps aux | grep php</code></pre><p>如果 PHP-FPM 进程不存在，则只有 <code>grep</code> 进程</p><h3 id="4-安装-Git-和-Composer"><a href="#4-安装-Git-和-Composer" class="headerlink" title="4. 安装 Git 和 Composer"></a>4. 安装 Git 和 Composer</h3><ol><li>安装 Git</li></ol><pre><code class="bash">$ apt install -y git</code></pre><ol start="2"><li>安装 Composer</li></ol><pre><code class="bash">$ wget https://raw.githubusercontent.com/composer/getcomposer.org/master/web/installer -O - -q | php -- --filename=composer -- install-dir=/usr/local/bin</code></pre><ol start="3"><li>composer 执行权限问题（新建普通用户，防止composer包有恶意代码）</li></ol><pre><code class="bash">$ composer -VDo not run Composer as root/super user!</code></pre><ol start="4"><li>配置 Packagist 中国镜像</li></ol><pre><code class="bash">$ composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</code></pre><h3 id="5-安全加固，避免使用根目录用户"><a href="#5-安全加固，避免使用根目录用户" class="headerlink" title="5. 安全加固，避免使用根目录用户"></a>5. 安全加固，避免使用根目录用户</h3><ol><li>创建新用户</li></ol><p>在创建新用户前先创建用户组，例如<code>foodaily</code></p><pre><code class="bash">$ addgroup foodailycompany</code></pre><p>随后创建新用户，例如<code>foodaily</code></p><pre><code class="bash">$ useradd -d /home/foodaily -s /bin/bash -m foodaily</code></pre><p>接着将用户添加至用户组：</p><pre><code class="bash">$ usermod -a -G foodailycompany -G www-data foodaily</code></pre><p>最后为新用户设置密码：</p><pre><code class="bash">$ passwd foodaily$ Enter new UNIX password:&lt;输入密码&gt;$ Retype new UNIX password:&lt;再次输入密码&gt;</code></pre><p>切换到新用户下面</p><pre><code class="bash">$ su foodaily</code></pre><p>切换回 root 用户</p><pre><code class="bash">$ su root</code></pre><ol start="2"><li>测试效果</li></ol><p>断开 SSH 链接，在本地使用以下命令作为<code>foodaily</code>用户登录到服务器</p><pre><code class="bash">$ ssh foodaily@公网IP$ foodaily@公网IP&#39;s password:&lt;输入密码&gt;</code></pre><ol start="3"><li>禁止根用户 SSH 登录</li></ol><pre><code class="bash">$ sed -i -E &#39;s/#?\s*(PermitRootLogin)(.*)$/\1 no/&#39; /etc/ssh/sshd_config</code></pre><p>建议手动编辑 <code>/etc/ssh/sshd_config</code> 文件，搜索<code>PermitRootLogin</code>这一关键字，将整行改成<code>PermitRootLogin no</code>，确保正行修改，首尾无多余字符<br>随后重启 SSH 服务即可</p><pre><code class="bash">$ service ssh restart</code></pre><ol start="4"><li>再次测试效果</li></ol><pre><code class="bash">$ ssh root@公网IP$ Permission denied, please try again.</code></pre><p><strong>注意</strong> ：如果要使用<code>root</code>用户，需要先通过<code>foodaily</code>用户 SSH 登录服务器，然后再通过<code>su root</code> 来切换 root 用户</p><h3 id="6-部署应用代码"><a href="#6-部署应用代码" class="headerlink" title="6. 部署应用代码"></a>6. 部署应用代码</h3><ol><li>使用 Git 拉取项目（HTTPS 协议）</li></ol><pre><code class="bash">$ cd /var/www/$ git clone https://github.com/username/demo.git demo$ Username for &#39;https://github.com&#39;: &lt;输入你的用户名&gt;$ Password for &#39;https://example@github.com&#39;: &lt;请输入你的密码&gt;</code></pre><p>私有项目需要输入账号和密码</p><ol start="2"><li>使用 Composer 安装依赖</li></ol><pre><code class="bash">$ cd demo$ composer install</code></pre><p>提示找不到<code>unzip</code>扩展</p><pre><code class="bash">$ apt install unzip</code></pre><ol start="3"><li>使用 Npm 或者 Yarn 安装依赖</li></ol><pre><code class="bash">$ cd demo$ sudo npm/yarn install</code></pre><ol start="4"><li>配置环境变量</li></ol><p>依赖安装完成后，需要将<code>.env.example</code>文件复制为<code>.env</code>文件，并生成<code>APP_KEY</code>秘钥：</p><pre><code class="bash">$ cd /var/www/demo$ php -r &quot;file_exists(&#39;.env&#39;) || copy(&#39;.env.example&#39;, &#39;.env&#39;);&quot;$ php artisan key:generate --ansi</code></pre><ol start="5"><li>配置文件所有者</li></ol><pre><code class="bash">$ chown -R www-data:www-data .</code></pre><h3 id="7-配置-Nginx-站点"><a href="#7-配置-Nginx-站点" class="headerlink" title="7. 配置 Nginx 站点"></a>7. 配置 Nginx 站点</h3><ol><li>在<code>/etc/nginx/sites-enabled</code>文件夹下放置每个网站的conf</li></ol><pre><code class="bash">$ foodaily.conf</code></pre><ol start="2"><li>现成 Nginx 配置如下：</li></ol><pre><code class="php">server {    listen 80;    server_name 公网IP或域名;     # 此为必修改项，请替换为服务器公网 IP 或域名    root /var/www/demo/public; # 此为必修改项，请注意指向站点根目录的 public 子目录    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;    add_header X-XSS-Protection &quot;1; mode=block&quot;;    add_header X-Content-Type-Options &quot;nosniff&quot;;    index index.html index.htm index.php;    charset utf-8;    location / {        try_files $uri $uri/ /index.php?$query_string;    }    location = /favicon.ico { access_log off; log_not_found off; }    location = /robots.txt  { access_log off; log_not_found off; }    error_page 404 /index.php;    location ~ \.php$ {        fastcgi_pass unix:/var/run/php/php7.2-fpm.sock; # 请注意核对 PHP 版本        fastcgi_index index.php;        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;        include fastcgi_params;    }    location ~ /\.(?!well-known).* {        deny all;    }}</code></pre><p>通常仅需要修改 <code>server_name</code>、<code>root</code>和<code>fastcgi_pass</code>三个选项即可</p><ol start="3"><li>重载 Nginx（三者等价）</li></ol><pre><code class="bash">$ service nginx restart$ service nginx reload$ nginx -s reload</code></pre><ol start="4"><li>Nginx https配置</li></ol><pre><code class="php">server {    listen 443 ssl;    ssl_certificate /usr/local/nginx/ssl/server.crt;    ssl_certificate_key    /usr/local/nginx/ssl/server.key;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    ssl_ciphers HIGH:!aNULL:!MD5:!DH;    server_name 公网IP或域名;     # 此为必修改项，请替换为服务器公网 IP 或域名    server_name foodaily.com www.foodaily.com;    # 如果有www的要填写两个    root /var/www/demo/public; # 此为必修改项，请注意指向站点根目录的 public 子目录    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;    add_header X-XSS-Protection &quot;1; mode=block&quot;;    add_header X-Content-Type-Options &quot;nosniff&quot;;    index index.html index.htm index.php;    charset utf-8;    location / {        try_files $uri $uri/ /index.php?$query_string;    }    location = /favicon.ico { access_log off; log_not_found off; }    location = /robots.txt  { access_log off; log_not_found off; }    error_page 404 /index.php;    location ~ \.php$ {        fastcgi_pass unix:/var/run/php/php7.2-fpm.sock; # 请注意核对 PHP 版本        fastcgi_index index.php;        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;        include fastcgi_params;    }    location ~ /\.(?!well-known).* {        deny all;    }}# 全站使用 HTTPS，让通过 HTTP 访问的用户301跳转到 HTTPSserver {    listen    80;    server_name example.com www.example.com;    return 301 https://$server_name$request_uri;}</code></pre><h3 id="8-安装-MySQL-5-7"><a href="#8-安装-MySQL-5-7" class="headerlink" title="8. 安装 MySQL 5.7"></a>8. 安装 MySQL 5.7</h3><ol><li>安装 MySQL</li></ol><pre><code class="bash">$ sudo apt install mysql-server</code></pre><ol start="2"><li>配置 MySQL</li></ol><pre><code class="bash">$ sudo mysql_secure_installation</code></pre><p>在成功设置 root 密码后还有一些列的安全设置</p><ol start="3"><li>安全设置</li></ol><pre><code class="bash">$ Do you wish to continue with the password provided?([Y/n]): y$ Enter current password for root (enter for none): &lt;输入密码&gt;$ Change the root password? [Y/n] n$ Remove anonymous users? [Y/n] y$ Disallow root login remotely? [Y/n] n$ Remove test database and access to it? [Y/n] n$ Reload privilege tables now? [Y/n] y</code></pre><ol start="4"><li>添加用户</li></ol><pre><code class="bash">$ create user usernamexxx identified by &#39;passwordxxx&#39;;</code></pre><p>用户名：usernamexxx，密码：passwordxxx</p><ol start="5"><li>授权</li></ol><pre><code class="bash">$ grant all privileges on db_name.* to usernamexxx@&#39;%&#39; identified by &#39;passwordxxx&#39;;$ flush privileges;</code></pre><p>给用户<code>usernamexxx</code>赋予<code>db_name</code>数据库的所有表的所有权限</p><ol start="6"><li>修改密码</li></ol><pre><code class="bash">$ update mysql.user set password = password(&#39;passwordxxx&#39;) where user = &#39;usernamexxx&#39; and host = &#39;%&#39;;$ flush privileges;</code></pre><ol start="7"><li>删除用户（会删除用户以及对应的权限，mysql.user和mysql.db表的相应记录随之删除）</li></ol><pre><code class="bash">$ drop user usernamexxx@&#39;%&#39;;</code></pre><ol start="8"><li>使用MySQL</li></ol><pre><code class="bash">$ /etc/init.d/mysql start$ /etc/init.d/mysql stop$ /etc/init.d/mysql restart</code></pre><ol start="9"><li>MySQL密码含有特殊字符的话，在<code>.env</code>文件中要加上双引号，否则密码无法完全识别</li></ol><h3 id="9-生产环境的必要优化"><a href="#9-生产环境的必要优化" class="headerlink" title="9. 生产环境的必要优化"></a>9. 生产环境的必要优化</h3><ol><li>Nginx 配置</li></ol><pre><code class="php">server {    location ~* \.(js|css)$ {        expires 24h;    }}</code></pre><ol start="2"><li>Laravel 的配置缓存</li></ol><pre><code class="bash">$ php artisan config:cache        # 生成配置缓存</code></pre><p><strong>注意</strong> ：当开启配置缓存后，<code>env()</code>函数将会失效，它永远返回null，因此务必确保在非config目录下使用env函数。生成缓存后，对配置的修改将不会生效，需要执行下面命令清除它们</p><pre><code class="bash">$ php artisan config:clear        # 清除配置缓存</code></pre><ol start="3"><li>Laravel 的路由缓存</li></ol><pre><code class="bash">$ php artisan route:cache        # 生成路由缓存</code></pre><p><strong>注意</strong>：若路由注册存在闭包，则无法使用该功能，生成缓存后，对路由的修改将不会生效，需要执行下面命令清除它们</p><pre><code class="bash">$ php artisan route:clear        # 清除路由缓存</code></pre><p><strong>注意</strong>：别直接使用下面命令清除所有缓存，因为有可能会清除掉 Redis 缓存</p><pre><code class="bash">$ php artisan cache:clear</code></pre><ol start="3"><li>Composer （安装依赖时）</li></ol><pre><code class="bash">$ composer install --optimize-autoloader --no-dev</code></pre><p>其中<code>--optimize-autoloader</code>表示生成优化后的自动加载器，<code>--no-dev</code>表示不安装composer.json中<code>require-dev</code>声明的扩展包</p><ol start="4"><li>文件权限</li></ol><p>文件权限应当遵守『最小权限原则』，即权限越小越好。</p><pre><code class="bash">$ chmod -R 750 /var/www/demo</code></pre><ol start="5"><li>杂项</li></ol><pre><code class="bash">$ php artisan storage:link        # 软链接，storage/app/public 到 public 目录$ php artisan migrate            # 执行迁移$ php artisan db:seed            # 执行数据填充</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;手动部署-Laravel-应用（基于Ubuntu18-04）&quot;&gt;&lt;a href=&quot;#手动部署-Laravel-应用（基于Ubuntu18-04）&quot; class=&quot;headerlink&quot; title=&quot;手动部署 Laravel 应用（基于Ubuntu18.04）&quot;&gt;
      
    
    </summary>
    
    
      <category term="Laravel" scheme="https://ljheisenberg1072.github.io/categories/Laravel/"/>
    
    
      <category term="部署" scheme="https://ljheisenberg1072.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
</feed>
